'use strict';

/**
 * Module dependencies.
 */

var app = require('../app');
const Config = require('../src/configurations/appConfig.js');
var debug = require('debug')(Config.APP_NAME + ":www");
var http = require('http');
/**
 *
 *
 *  Created By Suhail 16/02/2020
 *
 *
 * Get port from Express.
 */

var port = normalizePort(app.get('port'));

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);



/**
 * Event listener for HTTP server "error" event.
 */
server.on('error', error => {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
);


/**
 * Event listener for HTTP server "listening" event.
 */
server.on('listening', () => {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;

    console.log('   *********************************')
    console.log('   * Server started on PORT :', port, '*')
    console.log('   *********************************')
    debug('Listening on ' + bind);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}
